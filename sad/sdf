{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Riphah-ML-Project/Language_Detection/blob/main/sad/sdf\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j-M9GCmo8rQ8",
        "outputId": "efe6eccb-bfc2-4c82-8791-383cf1acaa75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xIdbyMUcOVca"
      },
      "outputs": [],
      "source": [
        "from tqdm import tqdm_notebook\n",
        "from PIL import Image\n",
        "from torch.utils.data import DataLoader, Dataset, random_split\n",
        "import copy\n",
        "import glob\n",
        "import torchvision\n",
        "import torch.utils.data\n",
        "import torchvision.transforms as transforms\n",
        "from torchvision import datasets\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import torch\n",
        "import os\n",
        "import cv2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pol-UrR-Rzj1",
        "outputId": "3504e636-66c0-423c-bf25-7deb4f195e5a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuda\n"
          ]
        }
      ],
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zrTC5meqPnVv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "261571c0-3dd3-44c0-fa2f-959e2d37c277"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/drive/MyDrive/test_set.zip\n"
          ]
        }
      ],
      "source": [
        "!unzip -u \"/content/drive/MyDrive/test_set.zip\" -d \"/content/drive/MyDrive/Internship/Fetal Cns/Dataset/\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JsjacsM-P0Cs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3c5925d2-76f0-413a-92e3-5ab96c599358"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/drive/MyDrive/training_set.zip\n",
            "   creating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/\n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/000_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/000_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/001_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/001_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/002_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/002_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/003_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/003_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/004_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/004_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/005_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/005_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/006_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/006_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/007_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/007_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/008_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/008_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/009_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/009_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/010_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/010_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/010_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/010_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/011_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/011_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/012_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/012_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/013_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/013_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/014_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/014_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/014_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/014_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/014_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/014_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/015_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/015_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/016_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/016_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/017_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/017_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/017_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/017_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/018_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/018_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/019_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/019_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/019_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/019_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/020_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/020_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/021_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/021_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/022_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/022_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/022_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/022_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/023_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/023_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/023_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/023_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/024_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/024_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/025_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/025_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/026_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/026_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/026_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/026_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/027_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/027_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/028_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/028_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/029_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/029_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/030_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/030_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/031_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/031_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/032_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/032_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/032_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/032_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/033_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/033_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/033_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/033_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/034_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/034_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/035_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/035_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/036_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/036_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/037_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/037_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/038_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/038_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/039_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/039_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/040_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/040_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/041_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/041_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/042_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/042_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/043_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/043_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/044_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/044_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/045_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/045_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/046_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/046_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/047_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/047_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/048_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/048_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/049_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/049_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/050_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/050_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/050_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/050_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/051_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/051_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/052_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/052_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/053_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/053_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/054_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/054_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/055_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/055_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/056_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/056_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/057_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/057_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/058_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/058_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/059_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/059_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/060_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/060_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/061_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/061_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/061_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/061_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/062_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/062_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/063_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/063_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/063_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/063_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/063_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/063_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/064_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/064_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/064_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/064_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/065_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/065_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/066_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/066_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/066_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/066_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/067_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/067_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/068_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/068_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/068_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/068_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/069_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/069_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/070_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/070_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/071_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/071_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/072_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/072_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/073_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/073_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/074_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/074_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/075_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/075_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/076_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/076_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/077_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/077_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/078_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/078_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/079_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/079_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/080_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/080_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/081_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/081_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/082_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/082_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/082_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/082_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/083_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/083_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/083_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/083_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/084_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/084_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/085_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/085_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/086_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/086_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/087_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/087_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/088_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/088_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/088_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/088_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/089_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/089_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/090_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/090_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/091_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/091_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/092_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/092_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/093_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/093_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/093_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/093_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/094_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/094_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/095_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/095_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/096_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/096_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/097_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/097_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/098_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/098_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/099_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/099_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/100_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/100_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/100_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/100_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/101_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/101_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/102_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/102_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/102_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/102_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/103_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/103_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/104_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/104_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/105_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/105_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/106_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/106_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/107_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/107_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/107_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/107_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/108_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/108_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/108_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/108_3HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/108_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/108_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/109_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/109_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/110_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/110_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/111_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/111_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/112_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/112_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/113_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/113_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/114_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/114_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/115_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/115_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/116_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/116_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/117_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/117_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/118_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/118_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/119_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/119_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/120_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/120_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/121_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/121_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/121_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/121_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/122_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/122_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/123_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/123_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/124_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/124_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/124_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/124_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/125_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/125_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/125_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/125_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/125_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/125_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/126_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/126_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/126_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/126_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/126_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/126_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/127_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/127_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/128_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/128_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/129_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/129_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/130_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/130_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/131_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/131_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/132_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/132_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_4HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_4HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/133_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/134_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/134_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/135_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/135_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/136_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/136_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/136_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/136_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/137_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/137_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/138_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/138_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/138_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/138_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/139_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/139_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/140_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/140_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/141_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/141_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/141_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/141_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/142_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/142_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/143_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/143_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/143_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/143_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/144_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/144_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/144_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/144_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/145_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/145_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/146_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/146_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/146_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/146_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/147_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/147_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/148_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/148_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/149_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/149_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/150_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/150_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/151_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/151_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/152_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/152_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/153_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/153_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/154_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/154_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/155_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/155_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/156_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/156_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/156_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/156_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/157_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/157_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/158_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/158_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/159_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/159_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/160_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/160_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/161_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/161_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/162_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/162_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/163_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/163_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/164_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/164_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/164_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/164_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/165_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/165_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/166_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/166_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/167_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/167_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/168_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/168_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/169_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/169_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/170_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/170_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/171_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/171_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/172_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/172_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/173_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/173_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/174_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/174_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/175_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/175_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/176_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/176_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/177_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/177_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/178_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/178_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/178_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/178_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/179_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/179_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/180_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/180_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/181_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/181_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/182_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/182_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/183_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/183_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/184_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/184_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/185_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/185_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/186_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/186_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/187_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/187_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/188_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/188_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/189_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/189_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/190_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/190_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/191_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/191_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/192_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/192_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/192_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/192_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/193_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/193_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/193_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/193_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/194_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/194_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/195_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/195_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/195_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/195_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/196_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/196_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/197_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/197_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/198_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/198_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/198_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/198_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/199_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/199_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/200_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/200_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/201_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/201_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/202_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/202_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_4HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_4HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/203_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/204_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/204_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/205_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/205_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/206_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/206_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/207_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/207_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/208_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/208_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/209_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/209_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/210_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/210_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/210_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/210_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/211_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/211_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/212_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/212_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/213_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/213_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/213_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/213_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/214_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/214_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/215_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/215_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/216_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/216_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/217_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/217_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/218_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/218_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/219_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/219_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/220_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/220_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/220_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/220_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/221_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/221_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/222_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/222_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/223_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/223_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/223_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/223_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/224_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/224_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/225_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/225_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/225_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/225_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/226_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/226_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/227_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/227_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/227_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/227_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/228_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/228_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/229_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/229_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/229_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/229_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/230_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/230_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/230_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/230_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/231_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/231_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/232_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/232_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/233_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/233_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/234_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/234_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/235_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/235_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/235_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/235_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/236_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/236_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/237_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/237_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/237_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/237_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/237_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/237_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/238_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/238_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/239_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/239_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/240_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/240_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/241_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/241_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/242_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/242_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/243_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/243_2HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/243_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/243_3HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/243_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/243_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/244_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/244_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/245_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/245_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/245_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/245_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/245_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/245_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/246_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/246_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/247_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/247_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/248_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/248_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/249_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/249_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/250_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/250_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/251_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/251_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/252_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/252_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/253_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/253_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/254_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/254_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/255_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/255_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/256_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/256_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/257_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/257_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/258_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/258_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/259_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/259_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/260_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/260_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/260_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/260_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/261_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/261_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/262_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/262_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/263_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/263_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/264_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/264_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/265_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/265_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/266_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/266_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/267_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/267_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/268_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/268_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/269_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/269_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/270_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/270_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/271_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/271_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/271_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/271_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/272_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/272_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/273_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/273_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/274_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/274_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/275_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/275_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/276_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/276_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/276_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/276_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/277_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/277_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/278_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/278_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/278_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/278_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/279_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/279_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/280_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/280_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/281_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/281_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/282_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/282_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/283_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/283_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/284_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/284_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/285_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/285_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/286_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/286_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/287_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/287_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/288_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/288_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/289_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/289_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/290_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/290_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/291_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/291_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/291_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/291_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/292_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/292_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/293_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/293_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/294_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/294_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/294_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/294_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/295_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/295_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/296_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/296_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/297_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/297_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/298_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/298_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/299_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/299_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/299_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/299_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/300_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/300_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/300_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/300_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/301_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/301_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/302_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/302_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/303_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/303_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/304_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/304_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/305_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/305_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/306_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/306_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/307_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/307_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/308_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/308_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/309_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/309_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/310_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/310_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/311_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/311_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/312_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/312_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/312_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/312_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/313_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/313_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/314_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/314_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/315_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/315_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/315_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/315_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/316_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/316_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/317_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/317_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/318_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/318_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/319_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/319_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/320_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/320_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/321_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/321_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/322_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/322_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/323_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/323_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/323_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/323_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/324_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/324_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/325_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/325_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/326_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/326_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/327_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/327_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/327_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/327_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/328_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/328_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/329_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/329_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/330_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/330_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/331_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/331_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/332_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/332_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/333_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/333_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/334_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/334_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/335_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/335_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/336_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/336_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/337_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/337_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/338_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/338_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/339_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/339_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/340_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/340_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/340_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/340_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/341_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/341_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/342_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/342_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/343_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/343_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/344_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/344_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/345_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/345_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/345_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/345_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/346_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/346_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/347_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/347_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/348_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/348_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/349_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/349_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/350_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/350_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/351_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/351_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/352_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/352_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/352_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/352_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/353_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/353_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/354_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/354_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/355_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/355_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/356_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/356_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/357_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/357_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/358_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/358_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/359_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/359_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/359_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/359_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/360_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/360_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/360_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/360_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/361_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/361_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/361_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/361_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/362_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/362_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/363_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/363_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/364_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/364_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/364_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/364_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/365_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/365_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/366_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/366_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/367_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/367_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/368_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/368_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/369_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/369_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/370_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/370_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/371_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/371_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/372_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/372_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/373_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/373_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/373_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/373_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/374_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/374_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/375_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/375_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/376_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/376_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/376_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/376_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/377_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/377_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/378_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/378_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/379_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/379_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/380_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/380_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/381_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/381_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/382_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/382_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/382_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/382_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/383_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/383_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/384_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/384_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/384_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/384_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/385_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/385_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/386_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/386_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/387_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/387_HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/388_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/388_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/389_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/389_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/390_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/390_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/391_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/391_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/392_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/392_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/392_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/392_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/392_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/392_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/393_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/393_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/394_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/394_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/394_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/394_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/395_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/395_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/396_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/396_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/397_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/397_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/398_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/398_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/399_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/399_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/399_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/399_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/400_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/400_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/401_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/401_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/402_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/402_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/403_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/403_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/403_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/403_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/404_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/404_2HC_Annotation.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/404_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/404_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/405_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/405_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/406_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/406_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/407_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/407_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/408_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/408_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/409_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/409_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/410_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/410_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/410_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/410_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/411_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/411_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/412_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/412_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/413_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/413_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/414_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/414_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/415_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/415_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/416_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/416_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/417_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/417_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/418_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/418_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/419_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/419_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/420_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/420_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/421_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/421_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/422_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/422_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/423_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/423_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/424_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/424_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/425_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/425_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/425_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/425_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_3HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_3HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_4HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_4HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/426_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/427_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/427_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/428_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/428_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/429_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/429_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/430_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/430_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/431_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/431_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/431_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/431_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/432_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/432_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/433_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/433_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/434_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/434_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/434_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/434_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/435_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/435_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/436_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/436_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/437_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/437_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/437_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/437_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/438_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/438_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/439_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/439_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/440_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/440_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/440_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/440_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/441_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/441_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/442_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/442_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/443_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/443_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/444_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/444_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/444_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/444_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/445_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/445_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/446_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/446_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/447_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/447_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/448_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/448_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/449_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/449_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/450_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/450_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/451_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/451_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/452_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/452_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/453_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/453_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/453_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/453_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/454_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/454_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/455_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/455_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/456_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/456_HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/457_2HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/457_2HC_Annotation.png  \n",
            " extracting: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/457_HC.png  \n",
            "  inflating: /content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/457_HC_Annotation.png  \n"
          ]
        }
      ],
      "source": [
        "!unzip -u \"/content/drive/MyDrive/training_set.zip\" -d \"/content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "--bNjUVyPWX_"
      },
      "outputs": [],
      "source": [
        "test_csv = pd.read_csv(\"/content/drive/MyDrive/Internship/Fetal Cns/test_set_pixel_size.csv\")\n",
        "train_csv = pd.read_csv(\"/content/drive/MyDrive/Internship/Fetal Cns/training_set_pixel_size_and_HC.csv\")\n",
        "test_img = \"/content/drive/MyDrive/Internship/Fetal Cns/Dataset/test_set/\"\n",
        "train_img =\"/content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V-GDVodJQgSk"
      },
      "outputs": [],
      "source": [
        "train_csv.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "teDDGi4gQjq0",
        "outputId": "671da1d5-4587-4d55-8a3f-c7214016d9ff"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"test_csv\",\n  \"rows\": 335,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 335,\n        \"samples\": [\n          \"025_HC.png\",\n          \"109_HC.png\",\n          \"076_HC.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pixel size(mm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05784258610064672,\n        \"min\": 0.0525587044264,\n        \"max\": 0.371304794594,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          0.119318962097,\n          0.119453862309,\n          0.142642089299\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "test_csv"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-41490212-a28a-4e7f-beda-482c0bb72192\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>filename</th>\n",
              "      <th>pixel size(mm)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>000_HC.png</td>\n",
              "      <td>0.235857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>001_HC.png</td>\n",
              "      <td>0.067973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>002_HC.png</td>\n",
              "      <td>0.165202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>003_HC.png</td>\n",
              "      <td>0.096674</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>004_HC.png</td>\n",
              "      <td>0.202203</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41490212-a28a-4e7f-beda-482c0bb72192')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-41490212-a28a-4e7f-beda-482c0bb72192 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-41490212-a28a-4e7f-beda-482c0bb72192');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-18db04bb-8d12-4fc2-830a-01132af4f545\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-18db04bb-8d12-4fc2-830a-01132af4f545')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-18db04bb-8d12-4fc2-830a-01132af4f545 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "     filename  pixel size(mm)\n",
              "0  000_HC.png        0.235857\n",
              "1  001_HC.png        0.067973\n",
              "2  002_HC.png        0.165202\n",
              "3  003_HC.png        0.096674\n",
              "4  004_HC.png        0.202203"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_csv.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iBufx526SB-A"
      },
      "outputs": [],
      "source": [
        "def mask_generator(im):\n",
        "  imgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\n",
        "  ret,thresh = cv2.threshold(imgray,127,255,0)\n",
        "  contours, useless1 = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "  ellipse = cv2.fitEllipse(contours[0])\n",
        "  return cv2.ellipse(im,ellipse,(255,255,255),-1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "GHyiu5Sfu9Os",
        "outputId": "8dbbafcf-690d-4703-90a7-0f235b683fcb"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 3000x700 with 4 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "fig = plt.figure(figsize = (30,7))\n",
        "for index in range(2):\n",
        "  file_path = os.path.join(train_img, train_csv.iloc[index, 0].replace('.png','_Annotation.png'))\n",
        "\n",
        "  ax = fig.add_subplot(2, 7, index+1)\n",
        "  plt.imshow(cv2.imread(file_path))\n",
        "\n",
        "  ax = fig.add_subplot(2, 7, index+8)\n",
        "  plt.imshow(mask_generator(cv2.imread(file_path)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WA0OXlGoxsel"
      },
      "outputs": [],
      "source": [
        "for index in range(len(train_csv)):\n",
        "    file_path = os.path.join('/content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/', train_csv.iloc[index, 0].replace('.png','_Annotation.png'))\n",
        "    im = cv2.imread(file_path)\n",
        "    mask = mask_generator(im)\n",
        "    cv2.imwrite(file_path, mask)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lSxqbbe5xVzA"
      },
      "outputs": [],
      "source": [
        "def generate_mask(source_file_path, dest_file_path):\n",
        "    file_names = sorted([file for _,_,files in os.walk(source_file_path) for file in files])\n",
        "    for i, file_name in enumerate(file_names):\n",
        "        if i % 2 != 0:\n",
        "            im = cv2.imread(source_file_path+file_name)\n",
        "            imgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\n",
        "            ret,thresh = cv2.threshold(imgray,127,255,0)\n",
        "            contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n",
        "            ellipse = cv2.fitEllipse(contours[0])\n",
        "            im1 = cv2.ellipse(im,ellipse,(255,255,255),-1)\n",
        "            image_name = file_name.replace('Annotation', 'Mask')\n",
        "            cv2.imwrite(dest_file_path+image_name, im1)\n",
        "\n",
        "    return 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xZL88ojnxmnH",
        "outputId": "005b23ea-85e6-47f3-cd1b-04f9f11699e4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "generate_mask('/content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/','/content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/Masks/')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EOSn_oc9XHjh"
      },
      "source": [
        "\n",
        "\n",
        "#Changing dataset to Torch form"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wGQ12_JWXFtx"
      },
      "outputs": [],
      "source": [
        "class CHALLENGE18(torch.utils.data.Dataset):\n",
        "  def __init__(self, png_images, transform_X=None,transform_Y = None,train=True):\n",
        "    self.X_train = glob.glob('/content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/training_set/*HC.png')\n",
        "\n",
        "    self.Y_train = glob.glob('/content/drive/MyDrive/Internship/Fetal Cns/Dataset/training_set/Masks/*')\n",
        "    self.transform_X = transform_X\n",
        "    self.transform_Y = transform_Y\n",
        "    self.png_images = png_images\n",
        "\n",
        "  def __len__(self):\n",
        "    if self.png_images == \"train\":\n",
        "      return len(self.X_train)\n",
        "    else:\n",
        "      print(\"code is wrong\")\n",
        "\n",
        "  def __getitem__(self,idx):\n",
        "    if self.png_images == \"train\":\n",
        "\n",
        "      X=np.array(Image.open(self.X_train[idx]).resize((572,572))).reshape(572,572,1) #as per U-net paper\n",
        "      X = self.transform_X(X)\n",
        "      # print(idx)\n",
        "      # print(self.X_train[idx])\n",
        "      name = self.X_train[idx].split('/')\n",
        "      name2 = self.Y_train[idx].split('/')\n",
        "      # print(name[7])\n",
        "      # print(name2[7])\n",
        "      Y=np.array(Image.open(self.Y_train[idx].replace(name2[7], name[7]).replace('_Mask.png','_Mask.png')).convert('L').resize((572,572))).reshape(572,572,1)\n",
        "      Y = self.transform_Y(Y)\n",
        "\n",
        "      #print(name2[8])\n",
        "      #print(self.Y_train[idx].replace(name2[5], name[3]).replace('.png','_Mask.png'))\n",
        "\n",
        "      return X, Y\n",
        "\n",
        "    else:\n",
        "      print(\"code is wrong\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eaCBtlTNMkhp"
      },
      "source": [
        "#Normalizing image between [0,1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pvYs4E5SloLF"
      },
      "outputs": [],
      "source": [
        "transform_X = transforms.Compose([transforms.ToTensor(),transforms.Normalize((0.5, ), (0.5, ))])\n",
        "transform_Y = transforms.Compose([transforms.ToTensor()])\n",
        "total_images = CHALLENGE18(\"train\",transform_Y=transform_Y, transform_X = transform_X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iuoWMYWbGH5-"
      },
      "outputs": [],
      "source": [
        "len(total_images)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IDkYByL0HL8r"
      },
      "outputs": [],
      "source": [
        "x, y =total_images[555]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0VD6VdtEGmfc"
      },
      "source": [
        "**Cross-checking the shape of x and y to being sure**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mQN5W4G7byX8"
      },
      "outputs": [],
      "source": [
        "x.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OC_Ws7v9bzaG",
        "outputId": "e6d3c451-6ef1-4d32-907e-40b55d002caa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 572, 572])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "y.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Un8BBfKPNC58"
      },
      "source": [
        "#for cross-validation, dividing the whole set in (90:10) ratio"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VsFHHVWnpFiK"
      },
      "outputs": [],
      "source": [
        "train_images = int(0.9 * len(total_images))\n",
        "test_images = len(total_images)- train_images\n",
        "\n",
        "train_data, validation_data = random_split(total_images,[train_images, test_images])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aZUIw-VnJhVD"
      },
      "source": [
        "**Creating only train_loader & validation_loader here**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8SR_Y065p4HS"
      },
      "outputs": [],
      "source": [
        "batch_size = 2\n",
        "\n",
        "train_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, shuffle=True, num_workers=2)\n",
        "validation_loader = torch.utils.data.DataLoader(validation_data, batch_size=batch_size, shuffle=True, num_workers=2)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t2lUJYk1qkRi"
      },
      "outputs": [],
      "source": [
        "def imshow(img, title):\n",
        "    img = img.clone().detach().numpy()\n",
        "    print('npimage shape',img.shape)\n",
        "    plt.show()\n",
        "    return img"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4CcQ1lPNq07T"
      },
      "outputs": [],
      "source": [
        "def show_train_batch_images(dataloader):\n",
        "    x, y = next(iter(dataloader))\n",
        "    print(x.shape)\n",
        "    return imshow(x[0],'d')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ORJ_qJf1q8rV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2fcfcfa7-2fe6-43a0-e3a2-86a0cdd2cfda"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([2, 1, 572, 572])\n",
            "npimage shape (1, 572, 572)\n"
          ]
        }
      ],
      "source": [
        "p =show_train_batch_images(validation_loader)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OnkIavrcqyBX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "58b4203f-277f-4f19-bbd3-7054c98029f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([2, 1, 572, 572])\n",
            "npimage shape (1, 572, 572)\n"
          ]
        }
      ],
      "source": [
        "q= show_train_batch_images(train_loader)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l9dsNlGqL2Mn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "977f2482-2c60-40b5-af68-16ddc956d25a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(1, 572, 572)"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "p.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lxRJDArFMDM6"
      },
      "outputs": [],
      "source": [
        "p=p.reshape(572,572)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "07OFr-ZWMF3Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "outputId": "fd995d8c-25d9-4547-b7ec-53591a02e8dc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7c2043714e80>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.imshow(p)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y1rz4QcJ0PIb"
      },
      "source": [
        "#preparing the U-net architecture"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iR8rSzRPCalm"
      },
      "outputs": [],
      "source": [
        "class double_conv(nn.Module):\n",
        "    '''(conv => BN => ReLU) * 2'''\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(double_conv, self).__init__()\n",
        "        self.conv = nn.Sequential(\n",
        "            nn.Conv2d(in_ch, out_ch, 3, padding=1),\n",
        "            nn.BatchNorm2d(out_ch),\n",
        "            nn.ReLU(inplace=True),\n",
        "            nn.Conv2d(out_ch, out_ch, 3, padding=1),\n",
        "            nn.BatchNorm2d(out_ch),\n",
        "            nn.ReLU(inplace=True)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class inconv(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(inconv, self).__init__()\n",
        "        self.conv = double_conv(in_ch, out_ch)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class down(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(down, self).__init__()\n",
        "        self.mpconv = nn.Sequential(\n",
        "            nn.MaxPool2d(2),\n",
        "            double_conv(in_ch, out_ch)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.mpconv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class up(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch, bilinear=True):\n",
        "        super(up, self).__init__()\n",
        "\n",
        "\n",
        "        if bilinear:\n",
        "            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n",
        "        else:\n",
        "            self.up = nn.ConvTranspose2d(in_ch//2, in_ch//2, 2, stride=2)\n",
        "\n",
        "        self.conv = double_conv(in_ch, out_ch)\n",
        "\n",
        "    def forward(self, x1, x2):\n",
        "        x1 = self.up(x1)\n",
        "\n",
        "        # input is CHW\n",
        "        diffY = x2.size()[2] - x1.size()[2]\n",
        "        diffX = x2.size()[3] - x1.size()[3]\n",
        "\n",
        "        x1 = F.pad(x1, (diffX // 2, diffX - diffX//2,\n",
        "                        diffY // 2, diffY - diffY//2))\n",
        "\n",
        "\n",
        "\n",
        "        x = torch.cat([x2, x1], dim=1)\n",
        "        x = self.conv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class outconv(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(outconv, self).__init__()\n",
        "        self.conv = nn.Conv2d(in_ch, out_ch, 1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DbP5YsYyCrbh"
      },
      "outputs": [],
      "source": [
        "class UNET(nn.Module):\n",
        "    def __init__(self, n_channels, n_classes):\n",
        "        super(UNET, self).__init__()\n",
        "        self.inc = inconv(n_channels, 64)\n",
        "        self.down1 = down(64, 128)\n",
        "        self.down2 = down(128, 256)\n",
        "        self.down3 = down(256, 512)\n",
        "        self.down4 = down(512, 512)\n",
        "        self.up1 = up(1024, 256)\n",
        "        self.up2 = up(512, 128)\n",
        "        self.up3 = up(256, 64)\n",
        "        self.up4 = up(128, 64)\n",
        "        self.outc = outconv(64, n_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x1 = self.inc(x)\n",
        "        x2 = self.down1(x1)\n",
        "        x3 = self.down2(x2)\n",
        "        x4 = self.down3(x3)\n",
        "        x5 = self.down4(x4)\n",
        "        x = self.up1(x5, x4)\n",
        "        x = self.up2(x, x3)\n",
        "        x = self.up3(x, x2)\n",
        "        x = self.up4(x, x1)\n",
        "        x = self.outc(x)\n",
        "        return torch.sigmoid(x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A0v3H3cpDGO1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a6593e1-bbb1-4581-98af-e75c42b7dec9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "UNET(\n",
              "  (inc): inconv(\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down1): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down2): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down3): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down4): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up1): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up2): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up3): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up4): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (outc): outconv(\n",
              "    (conv): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "model = UNET(1,1)\n",
        "model.to(device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7QH4mb75HxJ1"
      },
      "source": [
        "**In the above cell using \"model\" name as to represent U-Net model..**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BPSoNFx6bdH4"
      },
      "outputs": [],
      "source": [
        "import torch.optim as optim\n",
        "\n",
        "criterion = nn.BCELoss()\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.0015)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2P0fk0zHlKud"
      },
      "source": [
        "#Dice coefficient"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6I716J-tgfi6"
      },
      "outputs": [],
      "source": [
        "def dice_coeff(y_pred, y_targets):\n",
        "\n",
        "\n",
        "    smooth = 1\n",
        "    num = y_targets.size(0)\n",
        "    m1 = y_pred.view(num, -1)\n",
        "    m2 = y_targets.view(num, -1)\n",
        "    intersection = (m1 * m2)\n",
        "\n",
        "    score = 2. * (intersection.sum(1) + smooth) / (m1.sum(1) + m2.sum(1) + smooth)\n",
        "    score = score.sum() / num\n",
        "    return score.item()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J7zYHVC8e08L"
      },
      "outputs": [],
      "source": [
        "def dice_loss(y_predict, y_train):\n",
        "\n",
        "  dice_loss = 1 -(dice_coeff(y_predict, y_train))\n",
        "\n",
        "  return dice_loss"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "klz34VhE5NO6"
      },
      "source": [
        "#Training of the network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KsNW1X7NfqZH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "068735b2-ca78-48e6-b621-7fb7451fcfad"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  0%|          | 1/450 [00:02<15:22,  2.05s/it]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  0 Current Loss:  0.6549749374389648\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 11%|█▏        | 51/450 [00:22<02:42,  2.46it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  50 Current Loss:  0.5025008916854858\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 22%|██▏       | 101/450 [00:43<02:26,  2.39it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  100 Current Loss:  0.36747169494628906\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 34%|███▎      | 151/450 [01:04<02:07,  2.34it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  150 Current Loss:  0.31122058629989624\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 45%|████▍     | 201/450 [01:25<01:44,  2.38it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  200 Current Loss:  0.2720451354980469\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 56%|█████▌    | 251/450 [01:46<01:24,  2.35it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  250 Current Loss:  0.21056298911571503\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 67%|██████▋   | 301/450 [02:07<01:03,  2.35it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  300 Current Loss:  0.4105979800224304\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 78%|███████▊  | 351/450 [02:28<00:42,  2.34it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  350 Current Loss:  0.27158328890800476\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 89%|████████▉ | 401/450 [02:50<00:21,  2.33it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  1 Batch:  400 Current Loss:  0.2752305269241333\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|██████████| 450/450 [03:11<00:00,  2.35it/s]\n",
            "100%|██████████| 50/50 [00:08<00:00,  6.23it/s]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "================================================================================\n",
            "Epoch 1 completed\n",
            "Average train loss is 0.33007301883565054: \n",
            "Average train accuracy is 0.6404916293091244: \n",
            "Average validation loss is 0.6360363873839379\n",
            "Average validation accuracy is 0.5504489528236445\n",
            "================================================================================\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  0%|          | 1/450 [00:00<04:33,  1.64it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  0 Current Loss:  0.15967923402786255\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 11%|█▏        | 51/450 [00:22<02:54,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  50 Current Loss:  0.16707229614257812\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 22%|██▏       | 101/450 [00:44<02:31,  2.30it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  100 Current Loss:  0.29524168372154236\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 34%|███▎      | 151/450 [01:06<02:11,  2.27it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  150 Current Loss:  0.19853708148002625\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 45%|████▍     | 201/450 [01:28<01:49,  2.27it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  200 Current Loss:  0.2015550434589386\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 56%|█████▌    | 251/450 [01:50<01:26,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  250 Current Loss:  0.22209128737449646\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 67%|██████▋   | 301/450 [02:12<01:05,  2.28it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  300 Current Loss:  0.1804656982421875\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 78%|███████▊  | 351/450 [02:33<00:43,  2.30it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  350 Current Loss:  0.12590347230434418\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 89%|████████▉ | 401/450 [02:55<00:21,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  2 Batch:  400 Current Loss:  0.4612778127193451\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|██████████| 450/450 [03:16<00:00,  2.28it/s]\n",
            "100%|██████████| 50/50 [00:07<00:00,  6.27it/s]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "================================================================================\n",
            "Epoch 2 completed\n",
            "Average train loss is 0.20257778541909324: \n",
            "Average train accuracy is 0.7786865774790446: \n",
            "Average validation loss is 0.23755745328962802\n",
            "Average validation accuracy is 0.792400860786438\n",
            "================================================================================\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  0%|          | 1/450 [00:00<04:23,  1.70it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  0 Current Loss:  0.1429125964641571\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 11%|█▏        | 51/450 [00:22<02:57,  2.25it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  50 Current Loss:  0.07203692197799683\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 22%|██▏       | 101/450 [00:44<02:32,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  100 Current Loss:  0.19159869849681854\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 34%|███▎      | 151/450 [01:06<02:10,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  150 Current Loss:  0.25444066524505615\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 45%|████▍     | 201/450 [01:28<01:50,  2.26it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  200 Current Loss:  0.22901511192321777\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 56%|█████▌    | 251/450 [01:49<01:26,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  250 Current Loss:  0.08877752721309662\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 67%|██████▋   | 301/450 [02:11<01:05,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  300 Current Loss:  0.0771743506193161\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 78%|███████▊  | 351/450 [02:33<00:43,  2.25it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  350 Current Loss:  0.14289991557598114\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 89%|████████▉ | 401/450 [02:55<00:21,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  3 Batch:  400 Current Loss:  0.07149270921945572\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "100%|██████████| 450/450 [03:16<00:00,  2.29it/s]\n",
            "100%|██████████| 50/50 [00:07<00:00,  6.43it/s]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "================================================================================\n",
            "Epoch 3 completed\n",
            "Average train loss is 0.14898260208467642: \n",
            "Average train accuracy is 0.8359899504317178: \n",
            "Average validation loss is 0.245554132014513\n",
            "Average validation accuracy is 0.7517687875032425\n",
            "================================================================================\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "  0%|          | 1/450 [00:00<04:26,  1.68it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  4 Batch:  0 Current Loss:  0.09671758115291595\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 11%|█▏        | 51/450 [00:22<02:54,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  4 Batch:  50 Current Loss:  0.051760848611593246\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 22%|██▏       | 101/450 [00:44<02:33,  2.27it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  4 Batch:  100 Current Loss:  0.1022007092833519\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 34%|███▎      | 151/450 [01:06<02:10,  2.30it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  4 Batch:  150 Current Loss:  0.1325119584798813\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 45%|████▍     | 201/450 [01:27<01:48,  2.29it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  4 Batch:  200 Current Loss:  0.18621289730072021\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            " 56%|█████▌    | 251/450 [01:49<01:28,  2.25it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch:  4 Batch:  250 Current Loss:  0.10040721297264099\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 67%|██████▋   | 301/450 [02:11<01:05,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  4 Batch:  300 Current Loss:  0.1982077807188034\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 78%|███████▊  | 351/450 [02:33<00:43,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  4 Batch:  350 Current Loss:  0.05532754212617874\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 89%|████████▉ | 401/450 [02:55<00:21,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  4 Batch:  400 Current Loss:  0.10113544017076492\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 450/450 [03:16<00:00,  2.29it/s]\n",
            "100%|██████████| 50/50 [00:07<00:00,  6.32it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "================================================================================\n",
            "Epoch 4 completed\n",
            "Average train loss is 0.12336507215268082: \n",
            "Average train accuracy is 0.864492825931973: \n",
            "Average validation loss is 0.0984408599883318\n",
            "Average validation accuracy is 0.9161743760108948\n",
            "================================================================================\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  0%|          | 1/450 [00:00<05:14,  1.43it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  0 Current Loss:  0.11017099022865295\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 11%|█▏        | 51/450 [00:22<02:53,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  50 Current Loss:  0.269395649433136\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 22%|██▏       | 101/450 [00:44<02:31,  2.30it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  100 Current Loss:  0.06720156222581863\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 34%|███▎      | 151/450 [01:06<02:11,  2.28it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  150 Current Loss:  0.05816034972667694\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 45%|████▍     | 201/450 [01:28<01:48,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  200 Current Loss:  0.17184139788150787\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 56%|█████▌    | 251/450 [01:50<01:26,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  250 Current Loss:  0.055476583540439606\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 67%|██████▋   | 301/450 [02:11<01:05,  2.28it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  300 Current Loss:  0.057944487780332565\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 78%|███████▊  | 351/450 [02:33<00:43,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  350 Current Loss:  0.1003732681274414\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " 89%|████████▉ | 401/450 [02:55<00:21,  2.29it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:  5 Batch:  400 Current Loss:  0.08862107992172241\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 450/450 [03:16<00:00,  2.28it/s]\n",
            "100%|██████████| 50/50 [00:08<00:00,  6.15it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "================================================================================\n",
            "Epoch 5 completed\n",
            "Average train loss is 0.09795717154112127: \n",
            "Average train accuracy is 0.8902512583467695: \n",
            "Average validation loss is 0.09510979272425174\n",
            "Average validation accuracy is 0.9126454615592956\n",
            "================================================================================\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "epochs = 5\n",
        "from tqdm import tqdm\n",
        "\n",
        "train_running_accuracy_history = []\n",
        "validation_running_accuracy_history = []\n",
        "train_running_loss_history= []\n",
        "validation_running_loss_history = []\n",
        "\n",
        "\n",
        "for e in range(epochs):\n",
        "    train_running_loss = 0.0\n",
        "    validation_running_loss = 0.0\n",
        "    train_running_accuracy = 0.0\n",
        "    validation_running_accuracy = 0.0\n",
        "\n",
        "    model.train()\n",
        "\n",
        "    for ith_batch, sample_batched in enumerate(tqdm(train_loader)):\n",
        "        X_train, y_train = sample_batched\n",
        "        X_train= X_train.to(device)\n",
        "        y_train= y_train.to(device)\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        y_pred = model(X_train)\n",
        "\n",
        "        loss = 0.30 * dice_loss(y_pred, y_train) +  0.70 * criterion(y_pred, y_train)\n",
        "\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        if ith_batch % 50 == 0:\n",
        "            print('Epoch: ', e + 1, 'Batch: ', ith_batch, 'Current Loss: ', loss.item())\n",
        "\n",
        "        train_running_loss += loss.item()\n",
        "        train_running_accuracy += dice_coeff(y_pred, y_train)\n",
        "\n",
        "    train_epoch_loss = train_running_loss / len(train_loader)\n",
        "    train_epoch_accuracy = train_running_accuracy / len(train_loader)\n",
        "    train_running_loss_history.append(train_epoch_loss)\n",
        "    train_running_accuracy_history.append(train_epoch_accuracy)\n",
        "\n",
        "    with torch.no_grad():\n",
        "        model.eval()\n",
        "\n",
        "        for ith_batch, sample_batched in enumerate(tqdm(validation_loader)):\n",
        "            X_val, y_val = sample_batched\n",
        "            X_val = X_val.to(device)\n",
        "            y_val = y_val.to(device)\n",
        "\n",
        "            y_out = model(X_val)\n",
        "            out_val = (y_out + 0.5).int().float()\n",
        "\n",
        "            val_loss = 0.3 * dice_loss(out_val, y_val)  + 0.7 * criterion(y_out, y_val)\n",
        "\n",
        "            validation_running_loss += val_loss.item()\n",
        "            validation_running_accuracy += dice_coeff(out_val, y_val)\n",
        "\n",
        "    validation_epoch_loss = validation_running_loss / len(validation_loader)\n",
        "    validation_epoch_accuracy = validation_running_accuracy / len(validation_loader)\n",
        "    validation_running_loss_history.append(validation_epoch_loss)\n",
        "    validation_running_accuracy_history.append(validation_epoch_accuracy)\n",
        "\n",
        "    print(\"================================================================================\")\n",
        "    print(\"Epoch {} completed\".format(e + 1))\n",
        "    print(\"Average train loss is {}: \".format(train_epoch_loss))\n",
        "    print(\"Average train accuracy is {}: \".format(train_epoch_accuracy))\n",
        "    print(\"Average validation loss is {}\".format(validation_epoch_loss))\n",
        "    print(\"Average validation accuracy is {}\".format(validation_epoch_accuracy))\n",
        "    print(\"================================================================================\")\n",
        "\n",
        "    torch.cuda.empty_cache()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3cr6A99EmaYX"
      },
      "source": [
        "#plot for validation & training loss respectively"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VgUPzC96QulB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "outputId": "adf81a85-07dc-4abe-90b5-c4d4378e5a30"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7c204013e680>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(validation_running_loss_history, label = 'Validation Loss', color='green')\n",
        "plt.plot(train_running_loss_history, label = 'Train Loss',  color='red')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-A0-yFfkIf9z"
      },
      "source": [
        "**We can see that both the losses are decreasing**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Sa-0C9ZERM87",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf846931-42df-4917-a3ef-e47d8983514e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([1, 1, 572, 572])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "model.eval()\n",
        "X_train.size()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AmAma6jqRQXD"
      },
      "outputs": [],
      "source": [
        "out = (y_pred + 0.5).int().float()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "snlNjKRqRWAh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "696f8733-94db-498e-c31d-2c88f531070d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8242949843406677\n",
            "0.17570501565933228\n"
          ]
        }
      ],
      "source": [
        "print(dice_coeff(y_train, out))\n",
        "print(dice_loss(y_train, out))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xd6SvL9SVF4r"
      },
      "outputs": [],
      "source": [
        "class HC18_test(Dataset):\n",
        "    def __init__(self, root_dir, transform_X = None):\n",
        "        self.pixel_file = test_csv\n",
        "        self.root_dir = root_dir\n",
        "        self.transform_X = transform_X\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.pixel_file)\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        imx_name = os.path.join(self.root_dir, '', self.pixel_file.iloc[index, 0])\n",
        "\n",
        "        imx = Image.open(imx_name)\n",
        "\n",
        "        f_name = self.pixel_file.iloc[index, 0]\n",
        "\n",
        "        if self.transform_X :\n",
        "            imx = self.transform_X(imx)\n",
        "\n",
        "        sample = {'image': imx, 'f_name': f_name}\n",
        "        return sample"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K-v88WF9VGEa"
      },
      "outputs": [],
      "source": [
        "test_img = HC18_test('/content/drive/MyDrive/Internship/Fetal Cns/Dataset/test_set', transform_X = transform_X)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8VI8b8mtJS6m"
      },
      "source": [
        "**Creating test-loader to work with test images**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sWmR982rVGM_"
      },
      "outputs": [],
      "source": [
        "test_loader = torch.utils.data.DataLoader(test_img, batch_size=batch_size,shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cUMDDQ-OETti"
      },
      "outputs": [],
      "source": [
        "def avg_dice_index(dataloader):\n",
        "\n",
        "    dice = 0.0\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "\n",
        "        for ith_batch, sample_batched in enumerate(dataloader):\n",
        "            X_train , y_train = sample_batched\n",
        "            X_train = X_train.to(device)\n",
        "            y_train = y_train.to(device)\n",
        "            # print(model(X_train))\n",
        "\n",
        "            y_predict = (model(X_train) + 0.5).int().float()\n",
        "            # print(y_predict)\n",
        "\n",
        "            dice += dice_coeff(y_predict, y_train)\n",
        "\n",
        "    avg_dice = dice / len(dataloader)\n",
        "    # print(avg_dice)\n",
        "    return avg_dice"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QVpaY9VvZTlN"
      },
      "outputs": [],
      "source": [
        "test_loader = DataLoader(dataset = test_img, batch_size = 1, shuffle = True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lXIe_SW4hteW"
      },
      "source": [
        "#Writing in the Drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hnLgBOyph8fS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0375c74f-c6fe-4e5f-f19b-52ca3216382a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "task to write file is complete\n"
          ]
        }
      ],
      "source": [
        "transform = transforms.Compose([transforms.ToPILImage(),transforms.Resize((540, 800)),transforms.ToTensor()])\n",
        "\n",
        "with torch.no_grad():\n",
        "\n",
        "      for ith_batch , data in enumerate(test_loader):\n",
        "        X_test = data['image']\n",
        "        X_test = X_test.to(device)\n",
        "\n",
        "        y_pred = (model(X_test) + 0.5).int().float().cpu()\n",
        "\n",
        "        file_names = data['f_name']\n",
        "        Result = transform(y_pred[0])\n",
        "        torchvision.utils.save_image(Result , os.path.join('/content/drive/MyDrive/Internship/Fetal Cns/Dataset/segmentation_test_2/', file_names[0]))\n",
        "      print(\"task to write file is complete\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WeWxmP-9PYtn"
      },
      "source": [
        "**Function to create mask of test_set**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qTcUVKPWh8XQ"
      },
      "outputs": [],
      "source": [
        "def test_ellipse(im):\n",
        "    imgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\n",
        "    ret,thresh = cv2.threshold(imgray,127,255,0)\n",
        "    # im2,\n",
        "    contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n",
        "    contour_sizes = [len(contour) for contour in contours]\n",
        "    ellipse = cv2.fitEllipse(contours[np.argmax(contour_sizes)])\n",
        "    return ellipse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RNms8Sos1A2W"
      },
      "source": [
        "##Calculating The Head Circumfrence"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/drive/MyDrive/Internship/Fetal Cns/final1_result.csv\")\n",
        "df['OFD']= np.round(df.semi_axes_a_mm*2,1)\n",
        "df['BPD']= np.round(df.semi_axes_b_mm*2,1)\n",
        "b = np.round(df.BPD,1)\n",
        "c= np.round(df.OFD,1)\n",
        "d = b+c\n",
        "e=d*d*d\n",
        "f=(1.62*e)\n",
        "g=np.round(f**(1/3),1)\n",
        "\n",
        "h=g/10\n",
        "h=h"
      ],
      "metadata": {
        "id": "TN5_1nk8SFBQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6b8_W84BQB3X"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv(\"/content/drive/MyDrive/Internship/Fetal Cns/final1_result.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BP7pw4pYSQAm"
      },
      "outputs": [],
      "source": [
        "df['OFD']= np.round(df.semi_axes_a_mm*2,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g0Zyxl-bSje4"
      },
      "outputs": [],
      "source": [
        "df['BPD']= np.round(df.semi_axes_b_mm*2,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J94cOb_TRIWL"
      },
      "outputs": [],
      "source": [
        "b = np.round(df.BPD,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KQlbL51_TtqE"
      },
      "outputs": [],
      "source": [
        "c= np.round(df.OFD,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2ReWtrvGTz4Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73cac8c6-a82f-4f12-c297-9c66fef30316"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0      21.89\n",
            "1       5.26\n",
            "2      15.86\n",
            "3      12.79\n",
            "4      23.97\n",
            "       ...  \n",
            "330    14.70\n",
            "331     6.81\n",
            "332    13.06\n",
            "333    14.35\n",
            "334    12.51\n",
            "Length: 335, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "#OFD,  BPD = ellipse[3]\n",
        "    #submission['OFD'].extend([semi_axes_a_mm*2])\n",
        "    #submission['BPD'].extend([semi_axes_b*2])\n",
        "    #submission['Head Circumfrence'].extend([1.62*(BPD + OFD)^3])\n",
        "d = b+c\n",
        "e=d*d*d\n",
        "f=(1.62*e)\n",
        "g=np.round(f**(1/3),1)\n",
        "h=g/10\n",
        "print(h)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J3DbWTvTUae1"
      },
      "outputs": [],
      "source": [
        "df['Head_Circumfrence_cm']= h"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymE4pW7X1Iio"
      },
      "source": [
        "## Adding Gestational Age Data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "# Gestational Age\n",
        "conditions = [\n",
        "    (df['Head_Circumfrence_cm'] < 8.00),\n",
        "    (df['Head_Circumfrence_cm'] >= 8.00) & (df['Head_Circumfrence_cm'] <= 9.00),#week13\n",
        "    (df['Head_Circumfrence_cm'] > 9.01) & (df['Head_Circumfrence_cm'] <= 10.49),#week14\n",
        "    (df['Head_Circumfrence_cm'] >10.50 ) & (df['Head_Circumfrence_cm'] <= 12.49),#week15\n",
        "    (df['Head_Circumfrence_cm'] >12.50 ) & (df['Head_Circumfrence_cm'] <= 13.49),#week16\n",
        "    (df['Head_Circumfrence_cm'] >13.50 ) & (df['Head_Circumfrence_cm'] <= 14.99),#week17\n",
        "    (df['Head_Circumfrence_cm'] >15.00 ) & (df['Head_Circumfrence_cm'] <= 16.49),#week18\n",
        "    (df['Head_Circumfrence_cm'] >16.50 ) & (df['Head_Circumfrence_cm'] <= 17.49),#week19\n",
        "    (df['Head_Circumfrence_cm'] >17.50 ) & (df['Head_Circumfrence_cm'] <= 18.99),#week20\n",
        "    (df['Head_Circumfrence_cm'] >19.00 ) & (df['Head_Circumfrence_cm'] <= 19.99),#week21\n",
        "    (df['Head_Circumfrence_cm'] >20.00 ) & (df['Head_Circumfrence_cm'] <= 20.99),#week22\n",
        "    (df['Head_Circumfrence_cm'] >21.00 ) & (df['Head_Circumfrence_cm'] <= 22.49),#week23\n",
        "    (df['Head_Circumfrence_cm'] >22.50 ) & (df['Head_Circumfrence_cm'] <= 22.99),#week24\n",
        "    (df['Head_Circumfrence_cm'] >= 23.00) & (df['Head_Circumfrence_cm'] <= 23.99),#week25\n",
        "    (df['Head_Circumfrence_cm'] > 24.00) & (df['Head_Circumfrence_cm'] <= 24.79),#week26\n",
        "    (df['Head_Circumfrence_cm'] >24.80 ) & (df['Head_Circumfrence_cm'] <= 25.60),#week27\n",
        "    (df['Head_Circumfrence_cm'] >25.61 ) & (df['Head_Circumfrence_cm'] <= 26.75),#week28\n",
        "    (df['Head_Circumfrence_cm'] >26.76 ) & (df['Head_Circumfrence_cm'] <= 27.75),#week29\n",
        "    (df['Head_Circumfrence_cm'] >27.76 ) & (df['Head_Circumfrence_cm'] <= 28.85),#week30\n",
        "    (df['Head_Circumfrence_cm'] >28.86 ) & (df['Head_Circumfrence_cm'] <= 29.60),#week31\n",
        "    (df['Head_Circumfrence_cm'] >29.61 ) & (df['Head_Circumfrence_cm'] <= 30.40),#week32\n",
        "    (df['Head_Circumfrence_cm'] >30.41 ) & (df['Head_Circumfrence_cm'] <= 31.20),#week33\n",
        "    (df['Head_Circumfrence_cm'] >31.21 ) & (df['Head_Circumfrence_cm'] <= 31.80),#week34\n",
        "    (df['Head_Circumfrence_cm'] >31.81 ) & (df['Head_Circumfrence_cm'] <= 32.50),#week35\n",
        "    (df['Head_Circumfrence_cm'] >32.51 ) & (df['Head_Circumfrence_cm'] <= 33.00),#week36\n",
        "    (df['Head_Circumfrence_cm'] >33.01 ) & (df['Head_Circumfrence_cm'] <= 33.70),#week37\n",
        "    (df['Head_Circumfrence_cm'] >33.71 ) & (df['Head_Circumfrence_cm'] <= 34.20),#week38\n",
        "    (df['Head_Circumfrence_cm'] >34.21 ) & (df['Head_Circumfrence_cm'] <= 35.00),#week39\n",
        "    (df['Head_Circumfrence_cm'] >35.00 ) & (df['Head_Circumfrence_cm'] <= 36.00),#week40\n",
        "    (df['Head_Circumfrence_cm'] > 36)\n",
        "    ]\n",
        "\n",
        "# create a list of the values we want to assign for each condition\n",
        "values = ['Fetus is less than 8 Menstrual Weeks','13','14','15','16','17','18','19','20','21','22',\n",
        "          '23','24','25', '26', '27', '28','29','30','31','32','33','34','35','36','37','38','39','40','Abnormal']\n",
        "\n",
        "\n",
        "df['Gestational_Age_In_Weeks'] = np.select(conditions, values)\n",
        "\n",
        "\n",
        "df.head(10)"
      ],
      "metadata": {
        "id": "6QM5CoOTUVDp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yFYZoMtERatb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "be76cbc1-9f24-4042-d9b8-cafaff215adf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     filename  center_x_mm  center_y_mm  semi_axes_a_mm  semi_axes_b_mm  \\\n",
              "0  000_HC.png    93.549408    64.754676       53.137182       40.066081   \n",
              "1  001_HC.png    30.149135    21.278674       12.406453       10.017744   \n",
              "2  002_HC.png    60.145453    42.962513       38.206295       29.275126   \n",
              "3  003_HC.png    35.317196    27.461428       31.534354       22.914641   \n",
              "4  004_HC.png    80.814789    58.283808       58.664074       43.405146   \n",
              "\n",
              "   angle_rad    OFD   BPD  Head_Circumfrence_cm  \n",
              "0   3.131968  106.3  80.1                 21.89  \n",
              "1   2.924850   24.8  20.0                  5.26  \n",
              "2   0.124339   76.4  58.6                 15.86  \n",
              "3   3.121481   63.1  45.8                 12.79  \n",
              "4   0.062760  117.3  86.8                 23.97  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-45c33dad-5a9d-48cd-be82-27380a9a8d34\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>filename</th>\n",
              "      <th>center_x_mm</th>\n",
              "      <th>center_y_mm</th>\n",
              "      <th>semi_axes_a_mm</th>\n",
              "      <th>semi_axes_b_mm</th>\n",
              "      <th>angle_rad</th>\n",
              "      <th>OFD</th>\n",
              "      <th>BPD</th>\n",
              "      <th>Head_Circumfrence_cm</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>000_HC.png</td>\n",
              "      <td>93.549408</td>\n",
              "      <td>64.754676</td>\n",
              "      <td>53.137182</td>\n",
              "      <td>40.066081</td>\n",
              "      <td>3.131968</td>\n",
              "      <td>106.3</td>\n",
              "      <td>80.1</td>\n",
              "      <td>21.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>001_HC.png</td>\n",
              "      <td>30.149135</td>\n",
              "      <td>21.278674</td>\n",
              "      <td>12.406453</td>\n",
              "      <td>10.017744</td>\n",
              "      <td>2.924850</td>\n",
              "      <td>24.8</td>\n",
              "      <td>20.0</td>\n",
              "      <td>5.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>002_HC.png</td>\n",
              "      <td>60.145453</td>\n",
              "      <td>42.962513</td>\n",
              "      <td>38.206295</td>\n",
              "      <td>29.275126</td>\n",
              "      <td>0.124339</td>\n",
              "      <td>76.4</td>\n",
              "      <td>58.6</td>\n",
              "      <td>15.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>003_HC.png</td>\n",
              "      <td>35.317196</td>\n",
              "      <td>27.461428</td>\n",
              "      <td>31.534354</td>\n",
              "      <td>22.914641</td>\n",
              "      <td>3.121481</td>\n",
              "      <td>63.1</td>\n",
              "      <td>45.8</td>\n",
              "      <td>12.79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>004_HC.png</td>\n",
              "      <td>80.814789</td>\n",
              "      <td>58.283808</td>\n",
              "      <td>58.664074</td>\n",
              "      <td>43.405146</td>\n",
              "      <td>0.062760</td>\n",
              "      <td>117.3</td>\n",
              "      <td>86.8</td>\n",
              "      <td>23.97</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-45c33dad-5a9d-48cd-be82-27380a9a8d34')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-45c33dad-5a9d-48cd-be82-27380a9a8d34 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-45c33dad-5a9d-48cd-be82-27380a9a8d34');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-03ca850e-38eb-49ec-89b3-351108c1eea9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03ca850e-38eb-49ec-89b3-351108c1eea9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-03ca850e-38eb-49ec-89b3-351108c1eea9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 335,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 335,\n        \"samples\": [\n          \"025_HC.png\",\n          \"109_HC.png\",\n          \"076_HC.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"center_x_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.317035268337655,\n        \"min\": 16.918022691925948,\n        \"max\": 139.9927165010724,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          47.08932233778534,\n          33.74787784973968,\n          54.52787697103801\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"center_y_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.044841275947316,\n        \"min\": 13.321284972221312,\n        \"max\": 136.00869243814526,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          35.879482817203524,\n          28.778040518604023,\n          38.93099967125691\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"semi_axes_a_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.69856970689562,\n        \"min\": 2.07687973779627,\n        \"max\": 64.12673724603538,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          31.209213087815165,\n          29.836534870224614,\n          31.968289216986136\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"semi_axes_b_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.102861384641121,\n        \"min\": 1.3085443682452371,\n        \"max\": 50.286121666499774,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          25.239490748827787,\n          25.23668261966746,\n          26.87206234160057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"angle_rad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4070079199632157,\n        \"min\": 0.0003938815252227,\n        \"max\": 3.140755222585018,\n        \"num_unique_values\": 335,\n        \"samples\": [\n          2.8608037287958883,\n          3.099716975451333,\n          3.026069252876009\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OFD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.398846950423614,\n        \"min\": 4.2,\n        \"max\": 128.3,\n        \"num_unique_values\": 252,\n        \"samples\": [\n          33.2,\n          74.6,\n          66.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BPD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.206316774865467,\n        \"min\": 2.6,\n        \"max\": 100.6,\n        \"num_unique_values\": 233,\n        \"samples\": [\n          46.3,\n          93.8,\n          23.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Head_Circumfrence_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.782108447989193,\n        \"min\": 0.8,\n        \"max\": 26.51,\n        \"num_unique_values\": 282,\n        \"samples\": [\n          19.31,\n          12.64,\n          13.66\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 182
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "mXEZ1ApCeS9X",
        "outputId": "47017445-36e7-4283-c58e-e1792a6d70b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       filename  center_x_mm  center_y_mm  semi_axes_a_mm  semi_axes_b_mm  \\\n",
              "330  330_HC.png    53.254447    30.783145       33.559000       29.070491   \n",
              "331  331_HC.png    28.065746    19.605860       17.376853       11.620081   \n",
              "332  332_HC.png    43.213588    31.334127       30.534943       25.037581   \n",
              "333  333_HC.png    70.077950    62.956212       33.461308       27.641392   \n",
              "334  334_HC.png    33.813563    33.045108       29.917289       23.349064   \n",
              "\n",
              "     angle_rad   OFD   BPD  Head_Circumfrence_cm  \\\n",
              "330   2.944001  67.1  58.1                 14.70   \n",
              "331   0.173598  34.8  23.2                  6.81   \n",
              "332   3.065590  61.1  50.1                 13.06   \n",
              "333   3.085773  66.9  55.3                 14.35   \n",
              "334   2.992409  59.8  46.7                 12.51   \n",
              "\n",
              "                 Gestational_Age_In_Weeks  \n",
              "330                                    17  \n",
              "331  Fetus is less than 8 Menstrual Weeks  \n",
              "332                                    16  \n",
              "333                                    17  \n",
              "334                                    16  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a76b42cc-64b5-43df-b760-b9fe77bb71bc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>filename</th>\n",
              "      <th>center_x_mm</th>\n",
              "      <th>center_y_mm</th>\n",
              "      <th>semi_axes_a_mm</th>\n",
              "      <th>semi_axes_b_mm</th>\n",
              "      <th>angle_rad</th>\n",
              "      <th>OFD</th>\n",
              "      <th>BPD</th>\n",
              "      <th>Head_Circumfrence_cm</th>\n",
              "      <th>Gestational_Age_In_Weeks</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>330_HC.png</td>\n",
              "      <td>53.254447</td>\n",
              "      <td>30.783145</td>\n",
              "      <td>33.559000</td>\n",
              "      <td>29.070491</td>\n",
              "      <td>2.944001</td>\n",
              "      <td>67.1</td>\n",
              "      <td>58.1</td>\n",
              "      <td>14.70</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>331_HC.png</td>\n",
              "      <td>28.065746</td>\n",
              "      <td>19.605860</td>\n",
              "      <td>17.376853</td>\n",
              "      <td>11.620081</td>\n",
              "      <td>0.173598</td>\n",
              "      <td>34.8</td>\n",
              "      <td>23.2</td>\n",
              "      <td>6.81</td>\n",
              "      <td>Fetus is less than 8 Menstrual Weeks</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>332</th>\n",
              "      <td>332_HC.png</td>\n",
              "      <td>43.213588</td>\n",
              "      <td>31.334127</td>\n",
              "      <td>30.534943</td>\n",
              "      <td>25.037581</td>\n",
              "      <td>3.065590</td>\n",
              "      <td>61.1</td>\n",
              "      <td>50.1</td>\n",
              "      <td>13.06</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>333_HC.png</td>\n",
              "      <td>70.077950</td>\n",
              "      <td>62.956212</td>\n",
              "      <td>33.461308</td>\n",
              "      <td>27.641392</td>\n",
              "      <td>3.085773</td>\n",
              "      <td>66.9</td>\n",
              "      <td>55.3</td>\n",
              "      <td>14.35</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334</th>\n",
              "      <td>334_HC.png</td>\n",
              "      <td>33.813563</td>\n",
              "      <td>33.045108</td>\n",
              "      <td>29.917289</td>\n",
              "      <td>23.349064</td>\n",
              "      <td>2.992409</td>\n",
              "      <td>59.8</td>\n",
              "      <td>46.7</td>\n",
              "      <td>12.51</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a76b42cc-64b5-43df-b760-b9fe77bb71bc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a76b42cc-64b5-43df-b760-b9fe77bb71bc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a76b42cc-64b5-43df-b760-b9fe77bb71bc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c655ec93-69fe-4575-9904-ebea80ac5272\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c655ec93-69fe-4575-9904-ebea80ac5272')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c655ec93-69fe-4575-9904-ebea80ac5272 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"331_HC.png\",\n          \"334_HC.png\",\n          \"332_HC.png\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"center_x_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.656752013285928,\n        \"min\": 28.065746396411253,\n        \"max\": 70.07795047096,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.065746396411253,\n          33.81356290807997,\n          43.21358762547772\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"center_y_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.217944666646943,\n        \"min\": 19.605859827431924,\n        \"max\": 62.95621213127169,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          19.605859827431924,\n          33.04510769582412,\n          31.334126882823863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"semi_axes_a_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.689137557807768,\n        \"min\": 17.376852627020714,\n        \"max\": 33.55900046525856,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          17.376852627020714,\n          29.917289442550956,\n          30.53494338475113\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"semi_axes_b_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.920599669277191,\n        \"min\": 11.62008053511851,\n        \"max\": 29.07049052644645,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          11.62008053511851,\n          23.349063921791014,\n          25.037580564731837\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"angle_rad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2750867733286309,\n        \"min\": 0.1735976230245971,\n        \"max\": 3.085772930299787,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.1735976230245971,\n          2.992409426700443,\n          3.0655896313464037\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OFD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.351891251803995,\n        \"min\": 34.8,\n        \"max\": 67.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          34.8,\n          59.8,\n          61.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BPD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.853952504610373,\n        \"min\": 23.2,\n        \"max\": 58.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          23.2,\n          46.7,\n          50.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Head_Circumfrence_cm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.190741293179377,\n        \"min\": 6.81,\n        \"max\": 14.7,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.81,\n          12.51,\n          13.059999999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gestational_Age_In_Weeks\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"17\",\n          \"Fetus is less than 8 Menstrual Weeks\",\n          \"16\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 222
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QkCP4pTIzQAD"
      },
      "source": [
        "# ***Prediction on Single Image***"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tqdm import tqdm_notebook\n",
        "from PIL import Image\n",
        "from torch.utils.data import DataLoader, Dataset, random_split\n",
        "import copy\n",
        "import glob\n",
        "import torchvision\n",
        "import torch.utils.data\n",
        "import torchvision.transforms as transforms\n",
        "from torchvision import datasets\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import torch\n",
        "import os\n",
        "import cv2"
      ],
      "metadata": {
        "id": "Fg6hXwEf0r8z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uzo8JAEfzQAK"
      },
      "outputs": [],
      "source": [
        "class double_conv(nn.Module):\n",
        "    '''(conv => BN => ReLU) * 2'''\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(double_conv, self).__init__()\n",
        "        self.conv = nn.Sequential(\n",
        "            nn.Conv2d(in_ch, out_ch, 3, padding=1),\n",
        "            nn.BatchNorm2d(out_ch),\n",
        "            nn.ReLU(inplace=True),\n",
        "            nn.Conv2d(out_ch, out_ch, 3, padding=1),\n",
        "            nn.BatchNorm2d(out_ch),\n",
        "            nn.ReLU(inplace=True)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class inconv(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(inconv, self).__init__()\n",
        "        self.conv = double_conv(in_ch, out_ch)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class down(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(down, self).__init__()\n",
        "        self.mpconv = nn.Sequential(\n",
        "            nn.MaxPool2d(2),\n",
        "            double_conv(in_ch, out_ch)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.mpconv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class up(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch, bilinear=True):\n",
        "        super(up, self).__init__()\n",
        "\n",
        "\n",
        "        if bilinear:\n",
        "            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n",
        "        else:\n",
        "            self.up = nn.ConvTranspose2d(in_ch//2, in_ch//2, 2, stride=2)\n",
        "\n",
        "        self.conv = double_conv(in_ch, out_ch)\n",
        "\n",
        "    def forward(self, x1, x2):\n",
        "        x1 = self.up(x1)\n",
        "\n",
        "        # input is CHW\n",
        "        diffY = x2.size()[2] - x1.size()[2]\n",
        "        diffX = x2.size()[3] - x1.size()[3]\n",
        "\n",
        "        x1 = F.pad(x1, (diffX // 2, diffX - diffX//2,\n",
        "                        diffY // 2, diffY - diffY//2))\n",
        "\n",
        "\n",
        "\n",
        "        x = torch.cat([x2, x1], dim=1)\n",
        "        x = self.conv(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class outconv(nn.Module):\n",
        "    def __init__(self, in_ch, out_ch):\n",
        "        super(outconv, self).__init__()\n",
        "        self.conv = nn.Conv2d(in_ch, out_ch, 1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv(x)\n",
        "        return x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RklHSBrLzQAN"
      },
      "outputs": [],
      "source": [
        "class UNET(nn.Module):\n",
        "    def __init__(self, n_channels, n_classes):\n",
        "        super(UNET, self).__init__()\n",
        "        self.inc = inconv(n_channels, 64)\n",
        "        self.down1 = down(64, 128)\n",
        "        self.down2 = down(128, 256)\n",
        "        self.down3 = down(256, 512)\n",
        "        self.down4 = down(512, 512)\n",
        "        self.up1 = up(1024, 256)\n",
        "        self.up2 = up(512, 128)\n",
        "        self.up3 = up(256, 64)\n",
        "        self.up4 = up(128, 64)\n",
        "        self.outc = outconv(64, n_classes)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x1 = self.inc(x)\n",
        "        x2 = self.down1(x1)\n",
        "        x3 = self.down2(x2)\n",
        "        x4 = self.down3(x3)\n",
        "        x5 = self.down4(x4)\n",
        "        x = self.up1(x5, x4)\n",
        "        x = self.up2(x, x3)\n",
        "        x = self.up3(x, x2)\n",
        "        x = self.up4(x, x1)\n",
        "        x = self.outc(x)\n",
        "        return torch.sigmoid(x)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(device)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zopjf0Ze1FNE",
        "outputId": "971e8107-b3cb-4474-831b-75767b01549d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuda\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34774943-7c6e-4daa-974d-0dcd1c4c8602",
        "id": "1cLJRRVTzQAO"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "UNET(\n",
              "  (inc): inconv(\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down1): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down2): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down3): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (down4): down(\n",
              "    (mpconv): Sequential(\n",
              "      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "      (1): double_conv(\n",
              "        (conv): Sequential(\n",
              "          (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (2): ReLU(inplace=True)\n",
              "          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "          (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "          (5): ReLU(inplace=True)\n",
              "        )\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up1): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up2): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up3): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (up4): up(\n",
              "    (up): Upsample(scale_factor=2.0, mode='bilinear')\n",
              "    (conv): double_conv(\n",
              "      (conv): Sequential(\n",
              "        (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (2): ReLU(inplace=True)\n",
              "        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "        (5): ReLU(inplace=True)\n",
              "      )\n",
              "    )\n",
              "  )\n",
              "  (outc): outconv(\n",
              "    (conv): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "model = UNET(1,1)\n",
        "model.to(device)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the path where you want to save the model\n",
        "model_path = '/content/growth_model.pth'\n",
        "\n",
        "# Save the model\n",
        "torch.save(model.state_dict(), model_path)\n"
      ],
      "metadata": {
        "id": "cxvKX9Jx3PIH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torchvision.transforms as transforms\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import cv2\n",
        "import os\n",
        "import math\n",
        "\n",
        "# Define the transformation for preprocessing the input image\n",
        "transform_X = transforms.Compose([\n",
        "    transforms.Resize((572, 572)),  # Resize the image to the input size of the model\n",
        "    transforms.ToTensor(),          # Convert image to PyTorch tensor\n",
        "    transforms.Normalize((0.5,), (0.5,)),  # Normalize image data\n",
        "])\n",
        "\n",
        "def preprocess_image(image_path, transform):\n",
        "    \"\"\"Preprocesses a single image for prediction.\"\"\"\n",
        "    # Load the image\n",
        "    image = Image.open(image_path)\n",
        "    # Apply the transformation\n",
        "    preprocessed_image = transform(image).unsqueeze(0)  # Add batch dimension\n",
        "    return preprocessed_image\n",
        "\n",
        "def postprocess_mask(predicted_mask):\n",
        "    \"\"\"Postprocesses the predicted mask.\"\"\"\n",
        "    # Convert PyTorch tensor to numpy array\n",
        "    predicted_mask = predicted_mask.squeeze(0).cpu().numpy()\n",
        "    return predicted_mask\n",
        "\n",
        "def head_abdom_param(preprocessed_image):\n",
        "    if isinstance(preprocessed_image, torch.Tensor):\n",
        "        preprocessed_image = preprocessed_image.squeeze().detach().cpu().numpy()\n",
        "    elif isinstance(preprocessed_image, np.ndarray):\n",
        "        preprocessed_image = preprocessed_image.squeeze()\n",
        "    else:\n",
        "        print(\"Error: Unsupported input type. Please provide a PyTorch tensor or a NumPy array.\")\n",
        "        return None\n",
        "\n",
        "    if len(preprocessed_image.shape) == 3:\n",
        "        preprocessed_image_gray = cv2.cvtColor(preprocessed_image, cv2.COLOR_RGB2GRAY)\n",
        "    elif len(preprocessed_image.shape) == 2:\n",
        "        preprocessed_image_gray = preprocessed_image\n",
        "    else:\n",
        "        print(\"Error: Unsupported image shape. Expected 2D or 3D image.\")\n",
        "        return None\n",
        "\n",
        "    # Ensure that the image is in the correct format (CV_8UC1)\n",
        "    preprocessed_image_gray = preprocessed_image_gray.astype(np.uint8)\n",
        "\n",
        "    ret, thresh = cv2.threshold(preprocessed_image_gray, 127, 255, 0)\n",
        "    contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n",
        "    contour_sizes = [len(contour) for contour in contours]\n",
        "    ellipse = cv2.fitEllipse(contours[np.argmax(contour_sizes)])\n",
        "    im_mask = cv2.ellipse(np.zeros_like(preprocessed_image_gray), ellipse, (255, 255, 255), -1, 100)\n",
        "\n",
        "    semi_axes_b, semi_axes_a = ellipse[1]\n",
        "    if semi_axes_b > semi_axes_a:\n",
        "        semi_axes_b = semi_axes_b + semi_axes_a\n",
        "        semi_axes_a = semi_axes_b - semi_axes_a\n",
        "        semi_axes_b -= semi_axes_a\n",
        "\n",
        "    pixel_size = 0.112420544028  # Assuming a fixed pixel size (you may need to adjust this value)\n",
        "    semi_axes_a_mm = semi_axes_a * pixel_size / 2\n",
        "    semi_axes_b_mm = semi_axes_b * pixel_size / 2\n",
        "\n",
        "    OFD = np.round(semi_axes_a_mm * 2, 1)\n",
        "    BPD = np.round(semi_axes_b_mm * 2, 1)\n",
        "    b = np.round(BPD, 1)\n",
        "    c = np.round(OFD, 1)\n",
        "    d = b + c\n",
        "    e = d * d * d\n",
        "    f = (1.62 * e)\n",
        "    g = np.round(f ** (1 / 3), 1)\n",
        "    h = g / 10\n",
        "    circumference_in_cm = h * 10        ## cm to mm\n",
        "\n",
        "    return circumference_in_cm, BPD\n",
        "\n",
        "\n",
        "#def femur_length:\n",
        " # return\n",
        "\n",
        "# Example usage\n",
        "image_path = \"/content/334_HC.png\"\n",
        "\n",
        "# Preprocess the image\n",
        "preprocessed_image = preprocess_image(image_path, transform_X)\n",
        "\n",
        "# Load the pre-trained model\n",
        "model = UNET(n_channels=1, n_classes=1)  # Assuming the model takes 1 input channel and outputs 1 class\n",
        "model.load_state_dict(torch.load('/content/drive/MyDrive/growth_model.pth', map_location=torch.device('cpu')))\n",
        "model.eval()\n",
        "device = torch.device('cpu')\n",
        "model.to(device)\n",
        "\n",
        "# Pass the preprocessed image through the model to get the predicted mask\n",
        "with torch.no_grad():\n",
        "    model.eval()  # Set the model to evaluation mode\n",
        "    preprocessed_image = preprocessed_image.to(device)\n",
        "    predicted_mask = model(preprocessed_image)\n",
        "\n",
        "# Postprocess the predicted mask\n",
        "predicted_mask = postprocess_mask(predicted_mask)\n",
        "plt.figure(figsize=(15, 5))\n",
        "\n",
        "image = Image.open(image_path)\n",
        "# Original Image\n",
        "plt.subplot(1, 3, 1)\n",
        "plt.imshow(image)\n",
        "plt.title('Original Image')\n",
        "# Predicted Mask\n",
        "plt.subplot(1, 3, 2)\n",
        "predicted_mask = np.squeeze(predicted_mask, axis=0)  # Remove the extra batch dimension\n",
        "plt.imshow(predicted_mask, cmap='gray')\n",
        "plt.title('Predicted Mask')\n",
        "\n",
        "\n",
        "# Save the predicted mask image\n",
        "cv2.imwrite(\"/content/predicted_n.png\", (predicted_mask * 255).astype(np.uint8))\n",
        "\n",
        "# Calculate the head circumference from the predicted mask\n",
        "circumference_in_cm, bpd = head_abdom_param(preprocessed_image)\n",
        "print(\"Head Circumference (mm):\", circumference_in_cm)\n",
        "print(\"Biparietal Diameter: \",bpd)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "zVnu6wyM3PSR",
        "outputId": "a8c8d8ef-15eb-4606-c96e-3a438eedc00f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Head Circumference (mm): 147.0\n",
            "Biparietal Diameter:  56.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "eaCBtlTNMkhp",
        "Un8BBfKPNC58",
        "Y1rz4QcJ0PIb",
        "2P0fk0zHlKud",
        "lXIe_SW4hteW"
      ],
      "include_colab_link": true
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}